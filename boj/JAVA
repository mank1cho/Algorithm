/* Sort (int, String //  Compartor, Lambda) - 11650, 1181
 * stable Sort - 10814
 * back tracking basic - 15649 ~ 15652
 * 
 * 
 * 
 */

-------------------------------------------------------------------------------------------------------
Integer : 
parseInt(): 원시데이터인 int 타입을 반환
valueOf(): Integer 래퍼(wrapper)객체를 반환 (Boxing, 산술연산 못함)

parseInt는 산술연산이 가능하나 null 초기화가 불가능하다.
vlaueOf는 wrapper class로서 산술연산이 불가능하지만 null 처리가 가능하므로 SQL연동 시 사용될 수 있다.

java wrapper Class : Short, Integer, Long, Float, Double, BigInteger, BigDecimal
-------------------------------------------------------------------------------------------------------
String :

		String str1 = "string";
		String str2 = "string";
		String str3 = new String(string);
		String str4 = new String(string);
		str1과 str2는 같은 주소값을 가짐.
		str3과 str4는 새로운 객체를 생성한 것이므로 다른 주소값을 가짐.
		하지만 모든 문자열의 hashcode는 동일함.
		hashCode : 객체를 저장하는 hash table에서 각 객체에 대응되는 고유한 정수값.
		String 클래스는 내부적으로 hashCode 메서드를 재정의하여 같은 hashCode를 갖도록 설정되어있다.

		== 연산자는 같은 주소인지를 판별함
		equals는 같은 내용인지를 판별함.
		
		equals(Object)메소드가 true이면 두 객체의 hashCode 값은 같아야 한다.
		equals(Object)메소드가 false이면 두 객체의 hashCode가 꼭 다를 필요는 없다. (즉 내용이 달라도 hash code가 같을 수 있다.)
		하지만 서로 다른 hashCode 값이 나오면 해시 테이블(hash table)의 성능이 향상될 수 있다는 점은 이해하고 있어야 한다.
		
		참고
		https://gbsb.tistory.com/255
		https://blog.naver.com/travelmaps/220930144030
				
		----		
		일반 String과 StringBuilder, StringBuffer의 차이점 : String은 새로운 값을 할당할 때마다 새로 생성됨.
		+연산자로 문자열을 이어붙일때마다 새로운 String이 생성되므로 메모리 관리 측면에서 적절하지 않음. java에서 대표적인 immutable한 객체임.
		
		StringBuilder와 StringBuffer는 mutable한 객체이다. 문자열을 이어붙일 수 있다.
		*JDK 1.5 버전 이후에는 String 객체를 사용하더라도 컴파일 단계에서 StringBuilder로 컴파일하도록 변경되었다.
		
		StringBuilder 와 StringBuffer의 가장 큰 차이점 : Thread-safe.
		StringBuilder는 Thread-safe하지 않다.
		StringBuffer는 Thread-safe하다.
		
		참고 https://novemberde.github.io/2017/04/15/String_0.html
		
		
		//String 자리수 맞추기.
		int user_no = 30;
		String result_user_no = String.format("%04d", user_no);
		result_user_no 는 0030이 된다.
		%-명령시작, 0-채워질 문자, 4-총자리수, d-십진정수
		
		//소수점 아래 precision 설정
		String.format("%.3f", double or float)
		
		//Math.round()와 String.format()차이점 
		위 메서드들은 실수를 소수점 n번째까지 잘라서 표현한다는 공통점이 있다. 
		하지만 두개의 메서드가 꼭 같은 결과값을 출력하지는 않는다. 
		Math.round()함수는 소수점아래가 0일경우 절삭하지만 String.format은 절삭하지 않고 그대로 리턴한다.
		
		예)
		double money = 5000.000;
		System.out.println(Math.round(money*1000)/1000); //결과 5000
		System.out.println(String.format("%.3f", money)); //결과 : 5000.000

-------------------------------------------------------------------------------------------------------	
/* BigDecimal(소수점 아래 '최대' precision 설정, (0은 출력 안됨))
Double ans = BigDecimal.valueOf(double)
.setScale(3, RoundingMode.HALF_UP)
.doubleValue();
*/		

-------------------------------------------------------------------------------------------------------
compare 예제

-----------int--------------
		int[][] arr = new String[N][2];
		
		Arrays.sort(arr, new Comparator<int[]>() {
			@Override
			public int compare(int[] e1, int[] e2) {
				if(e1[1] == e2[1]) {
					return e1[0] - e2[0];
				} else {
					return e1[1] - e2[1];
				}
			}
		});
		
*lambda		
		Arrays.sort(arr, (e1, e2) -> {	// int[] e1, int[] e2 가 정석인데 타입이 생략됨.
			if(e1[1] == e2[1]) {
				return e1[0] - e2[0];
			} else {
				return e1[1] - e2[1];
			}
		});
		
----------string-------------
		String[] arr = new String[N];
		
		Arrays.sort(arr, new Comparator<String>() {
			@Override
			public int compare(String s1, String s2) {
				if(s1.length() == s2.length()) {
					return s1.compareTo(s2);
				}
				else {
					return s1.length() - s2.length();
				}
			}
		});
		
*lambda
		Arrays.sort(arr, (String s1, String s2) -> {
			if(s1.length() == s2.length()) {
				return s1.compareTo(s2);
			}
			else
				return s1.length() - s2.length();
		});
		
		
------------객체---------------
객체의 정렬구현방법에는 크게 4가지가 있다.
모든 예시는 아래의 클래스를 기준으로 한다.

public static class Time{
	int start;
	int end;
	Time(int start, int end){
		this.start = start;
		this.end = end;
	}
}

---1. 해당 클래스에 comparable 인터페이스를 구현한다.

	public static class Time implements Comparable<Time>{
		int start;
		int end;
		Time(int start, int end){
			this.start = start;
			this.end = end;
		}
		@Override
		public int compareTo(Time t) {
			if(end == t.end) {
				return start - t.start;
			}
			else
				return end-t.end;
		}
	}
	
이후 그냥 Arrays.sort(); 혹은 Collections.sort(); 를 사용한다.


---2. Comparator 인터페이스를 구현한다.
Comparator 인터페이스의 구현체를 Arrays.sort()나 Collections.sort()와 같은 정렬 메서드에 추가 인자로 넘기면
정렬 기준이 누락된 클래스의 캑체나 기존 정렬 기준을 무시하고 새로운 정렬 기준으로 객체를 정렬할 수 있다.

		Time[] arr = new Time[N];
		
		Comparator<Time> comp = new Comparator<>() {
			@Override
			public int compare(Time a, Time b) {
				if(a.end == b.end) return a.start - b.start;
				else return a.end - b.end;
			}
		};
		
		Arrays.sort(arr, comp);	
	
---3. 람다 함수로 정렬.

		Arrays.sort(arr, (a, b) -> {       //a, b가 매개변수로 들어가는데 타입은 생략될 수 있다.
			if(a.end == b.end) {
				return a.start - b.start;
			}
			else
				return a.end - b.end;
		});
		
가장 쉽게 구현이 가능한 장점이 있다.

4. Stream으로 정렬
List를 사용할 경우 Stream을 통해 '새롭게 정렬된 객체'를 생성할 수 있다.

		List<Time> unsorted = new ArrayList<>();  // unsorted라는 ArrayList가 있을 때
		
		List<Time> sorted = unsorted.stream()	  // sorted라는 새로운 정렬된 ArrayList를 만든다.
				.sorted((a, b) -> {
					if(a.end == b.end) return a.start - b.start;
					else return a.end - b.end;
				})
				.collect(Collectors.toList());
		

-------------------------------------------------------------------------------------------------------		
Queue
**헤더 : 
 java.util.Linkedlist
 java.util.Queue

**선언 :
 Queue<Integer> q = new LinkedList<>();
 
**메서드 :
  추가(enqueue)
  add(value) 큐에 여유공간이 없어 삽입 실패시 IllegalStateException 발생
  offer(value) 실패시 false 리턴
  
  삭제(dequeue)
  remove() 큐가 비어있으면 IllegalStateException 발생
  poll() 큐의 첫번째 요소를 반환하고 제거. 큐가 비어있으면 null 리턴

  검사(peek)
  element() 실패시 IllegalStateException 발생
  peek() 실패시 false 리턴
   
  clear()

-------------------------------------------------------------------------------------------------------		
Dequeue
**헤더 : 
 java.util.ArrayDeque;
 java.util.Deque;

**선언 :
 Deque<Integer> dq = new ArrayDeque<>();
		
**메서드 :
  추가(enqueue)
  addFirst(value) 큐에 여유공간이 없어 삽입 실패시 IllegalStateException 발생
  offerFirst(value) 실패시 false 리턴
  addLast() 덱의 마지막에 삽입
  offerLast() 덱의 마지막에 삽입
  add() -> addLast와 동일
  offer() -> offerLast와 동일
  
  삭제(dequeue)
  removeFirst() 덱의 첫번째 요소를 반환하고 제거. 덱이 비어있으면 Exception 발생
  remove() removeFirst와 동일
  element() 동일
  removeLast() 덱의 마지막 요소를 반환하고 제거
  
  pollFirst() 덱의 첫번째 요소를 반환하고 제거. 덱가 비어있으면 null 리턴
  pollLast()
  poll() pollFirst와 동일

  검사(peek)
  getFirst() 덱의 앞쪽 엘리먼트 리턴. 덱이 비어있으면 Exception발생
  getLast() 덱의 뒤쪽 엘리먼트 리턴
  peekFirst() 덱의 앞쪽 엘리먼트를 리턴. 덱이 비어있으면 null 리턴
  peek() 동일.
  peekLast() 덱의 앞쪽 엘리먼트 리턴
  
  
  clear()
  iterator() 덱의 가장 앞쪽 iterator를 얻어옴
  descendingIterator() 덱의 가장 뒤쪽 iterator를 얻어옴

-------------------------------------------------------------------------------------------------------		
Stack
**헤더 :
 java.util.Stack
 
**선언 :
 Stack<Integer> stack = new Stack<>();
 
**메서드 :
 push()
 pop()
 clear()
 peek()
 empty()
 contains(value) stack 에 value가 있는지 check(있으면 true)
 
-------------------------------------------------------------------------------------------------------		
Proirity Queue
**헤더 :
 java.util.PriorityQueue
 
**선언 :
 우선순위가 낮은 숫자 순
 PriorityQueue<Integer> pq = new PriorityQueue<>();
 우선순위가 높은 숫자 순
 PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
 
**메서드 : 
 추가(enqueue)
 add(value) 큐에 여유공간이 없어 삽입 실패시 IllegalStateException 발생
 offer(value) 실패시 false 리턴
 
 삭제(dequeue)
 remove() 큐가 비어있으면 IllegalStateException 발생
 poll() 큐가 비어있으면 null 리턴

 검사(peek)
 element() 실패시 IllegalStateException 발생
 peek() 실패시 false 리턴
   
 clear()
 
-------------------------------------------------------------------------------------------------------		
ArrayList
**헤더 :
 java.util.ArrayList;
 
ArrayList list = new ArrayList();//타입 미설정 Object로 선언된다.
ArrayList<Student> members = new ArrayList<Student>();//타입설정 Student객체만 사용가능
ArrayList<Integer> num = new ArrayList<Integer>();//타입설정 int타입만 사용가능
ArrayList<Integer> num2 = new ArrayList<>();//new에서 타입 파라미터 생략가능
ArrayList<Integer> num3 = new ArrayList<Integer>(10);//초기 용량(capacity)지정
ArrayList<Integer> list2 = new ArrayList<Integer>(Arrays.asList(1,2,3));//생성시 값추가

ArrayList 값 추가
ArrayList<Integer> list = new ArrayList<Integer>();
list.add(3); //값 추가
list.add(null); //null값도 add가능
list.add(1,10); //index 1뒤에 10 삽입

list.remove(1);  //index 1 제거
list.clear();  //모든 값 제거
list.size(); //list의 크기
list.get(idx); //idx의 값 리턴

Iterator iter = list.iterator(); // iterator 선언
while(iter.hasNext()){System.out.println(iter.next());} // iterator를 통한 list 전체순회

System.out.println(list.contains(1)); //list에 1이 있는지 검색 : true
System.out.println(list.indexOf(1)); //1이 있는 index반환 없으면 -1

-------------------------------------------------------------------------------------------------------
얕은 복사와 깊은 복사
얕은 복사(Shallow Copy) : 복사된 배열이나 원본배열이 변경될 때 서로 간의 값이 같이 변경됨.
깊은 복사(Deep Copy) : 복사된 배열이나 원본배열이 변경될 때 서로 간의 값은 바뀌지 않음.

얕은 복사의 예
int[] a = {1,2,3,4};
int[] b = a;
= 연산자는 주소를 이어준다는 의미. 해당 코드는 얕은 복사가 되므로 b값을 변경할 시 a값도 변경되는 상황이 나옴

깊은 복사를 하는 예)
Arrays.clone()을 사용할 수 있음 // b = a.clone();
Arrays.copyOf(a, a.lenth)  // 배열의 시작점~원하는 length까지 복사 가능
Arrays.copyOfRange(a, 1, 3) // 시작점도 정할 수 있음
System.arraycopy(a,0,b,0, a.length); 지정된 배열을 대상 배열의 지정된 위치에 복사
2차원 이상 배열은 메서드로 복사가 불가능함.

OOP is A PIE
A : abstraction
P : polymorphism
I : Inheritance
E : Encapsulation